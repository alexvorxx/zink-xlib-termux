/*
 * Copyright Â© 2022 Konstantin Seurer
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#version 460

#extension GL_GOOGLE_include_directive : require

#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference2 : require

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

#include "build_interface.h"

layout(push_constant) uniform CONSTS {
   lbvh_internal_args args;
};

void
main(void)
{
   uint32_t global_id = gl_GlobalInvocationID.x;

   bool is_root_node = (args.is_root_and_count & 0x80000000u) != 0;
   uint32_t src_count = args.is_root_and_count & 0x7FFFFFFFu;

   uint32_t src_index = global_id * 2;
   uint32_t child_count = min(src_count - src_index, 2);

   uint32_t dst_offset = args.dst_offset + global_id * SIZEOF(radv_ir_box_node);
   uint32_t current_id = pack_ir_node_id(dst_offset, radv_ir_node_internal);

   REF(radv_ir_box_node) dst_node = REF(radv_ir_box_node)(OFFSET(args.bvh, dst_offset));

   AABB total_bounds;
   total_bounds.min = vec3(INFINITY);
   total_bounds.max = vec3(-INFINITY);

   bool is_active = false;
   for (uint32_t i = 0; i < 2; i++) {
      AABB bounds;
      bounds.min = vec3(NAN);
      bounds.max = vec3(NAN);

      uint32_t child_id = DEREF(INDEX(key_id_pair, args.src_ids, src_index + i)).id;

      if (i < child_count && child_id != NULL_NODE_ID) {
         VOID_REF node = OFFSET(args.bvh, ir_id_to_offset(child_id));
         REF(radv_ir_node) child = REF(radv_ir_node)(node);
         bounds = load_aabb(child);

         total_bounds.min = min(total_bounds.min, bounds.min);
         total_bounds.max = max(total_bounds.max, bounds.max);
         is_active = true;

         DEREF(child).parent = current_id;
      } else {
         child_id = NULL_NODE_ID;
      }

      DEREF(dst_node).children[i] = child_id;
   }
   DEREF(dst_node).base.aabb[0][0] = total_bounds.min.x;
   DEREF(dst_node).base.aabb[0][1] = total_bounds.min.y;
   DEREF(dst_node).base.aabb[0][2] = total_bounds.min.z;
   DEREF(dst_node).base.aabb[1][0] = total_bounds.max.x;
   DEREF(dst_node).base.aabb[1][1] = total_bounds.max.y;
   DEREF(dst_node).base.aabb[1][2] = total_bounds.max.z;

   /* An internal node is considered inactive if it has no children. Set the resulting scratch node
    * id to NULL_NODE_ID for more internal nodes to become inactive.
    */
   DEREF(INDEX(key_id_pair, args.dst_ids, global_id)).id = is_active ? current_id : NULL_NODE_ID;

   if (is_root_node) {
      /* We're writing the root node, which doesn't have a parent */
      DEREF(dst_node).base.parent = 0xFFFFFFFF;
   }
}
